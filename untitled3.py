# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tjAuUVgZhaK9JUlftCDnk8y4CCGN9Bof
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import statsmodels.api as sp
import seaborn as sns
import itertools
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, f1_score
from sklearn.metrics import confusion_matrix,classification_report
from plotly.offline import init_notebook_mode,iplot,plot
from plotly.offline import init_notebook_mode,iplot,plot
import cufflinks as cf
from sklearn.preprocessing import LabelEncoder
from sklearn.svm import SVC
from sklearn.cluster import KMeans

df=pd.read_csv(r'/Mall_Customers.csv')

df.head()

df.isnull().sum()

df=df.drop(['CustomerID'],axis=1)

df=df.rename(columns={'Annual Income (k$)':'Annual_Income'})
df=df.rename(columns={'Spending Score (1-100)':'Spending_Score'})

plt.figure(figsize=(14,10))  #figuresize define
sns.set(font_scale=1) #fontsize 
sns.heatmap(df.corr(),cmap='Purples',annot=True,linecolor='Green',linewidth=1.0)

labels=df['Gender'].unique()

values=df['Gender'].value_counts(ascending=True)

fig,(ax0,ax1) = plt.subplots(ncols=2,figsize=(15,8))

bar = ax0.bar(x=labels,height=values,width=0.4,align='center',color=['#42a7f5','#d400ad'])

ax0.set(title='Count difference in Gender Distribution', xlabel='Gender', ylabel='No. of Customers')

ax0.set_ylim (0,130)

ax0.legend()

ax1.pie (values, labels=labels, colors=['#42a7f5', '#d400ad'], autopct='%1.1f%%') 
ax1.set(title='Ratio of Gender Distribution')

fig.suptitle('Gender Distribution', fontsize=30)
plt.show()

df.Age.describe()

df[df['Gender']=='Male']['Age'].describe()

df[df['Gender']=='Female']['Age'].describe()

male=df[df['Gender']=='Male']
female=df[df['Gender']=='female']

sns.countplot(x ='Age', data = male)

df[df['Gender']=='Male']['Age'].value_counts().head()

df.Annual_Income.describe()

plt.figure(figsize=(14,10))  #figuresize define
sns.set(font_scale=1) #fontsize 
plt.hist(data=df,x='Annual_Income')
plt.show()

sns.boxplot(y=df[df['Gender']=='Male']['Age'], color="#42a7f5")

fig, ax = plt.subplots(figsize=(15,7))

sns.set(font_scale=1.5) 
ax = sns.scatterplot (y=df['Annual_Income'], x=df['Age'], hue=df['Gender'], palette='seismic', s=70, edgecolor='black', linewidth=0.3) 
ax.set_ylabel('Annual Income (in Thousand USD)') 
ax.legend (loc='upper right') 
plt.title('Annual Income per Age by Gender', fontsize = 20) 
plt.show()

fig, ax = plt.subplots(figsize=(15,7))

sns.set(font_scale=1.5) 
ax = sns.scatterplot (y=df['Spending_Score'], x=df['Age'], hue=df['Gender'], palette='seismic', s=70, edgecolor='black', linewidth=0.3) 
ax.set_ylabel('Spending_Score (in Thousand USD)') 
ax.legend (loc='upper right') 
plt.title('Spending_Score er Age by Gender', fontsize = 20) 
plt.show()

cluster_data=df.iloc[:,[2,3]]

cluster_data.head()

fig, ax = plt.subplots(figsize=(15,7))

sns.set(font_scale=1.5) 
ax = sns.scatterplot (y=cluster_data['Annual_Income'], x=cluster_data['Spending_Score'], palette='seismic', s=70, edgecolor='black', linewidth=0.3) 
ax.set_ylabel('Spending_Score (in Thousand USD)') 
ax.legend (loc='upper right') 
plt.title('Spending_Score per Annual_Income', fontsize = 20) 
plt.show()

from sklearn.cluster import KMeans
wcss=[]
for i in range(1,30):
    km = KMeans(i)
    km.fit(cluster_data)
    wcss.append(km.inertia_)
np.array(wcss)

fig, ax = plt.subplots(figsize=(15,7))

ax = plt.plot(range(1,30), wcss, linewidth=2, color="red", marker = "8")

plt.axvline(x=5,ls='--')

plt.ylabel('WCSS')

plt.xlabel('No. of Clusters (k)')

plt.title('The Elbow Method', fontsize = 20)

plt.show()

from sklearn.cluster import KMeans

kms = KMeans(n_clusters=5, init='k-means++')
kms.fit(cluster_data)

"""Now we have the clusters created, we will enter them into a different column"""

clusters = cluster_data.copy()
clusters['Cluster_Prediction'] = kms.fit_predict(cluster_data)
clusters.head()

#We can also get the centroids of the clusters by the cluster_centers_ attribute of KMeans algorithm.

kms.cluster_centers_

fig, ax = plt.subplots(figsize=(15,7)) 
plt.scatter(x=clusters[clusters['Cluster_Prediction'] == 4]['Annual_Income'],
            y=clusters[clusters['Cluster_Prediction'] == 4]['Spending_Score'],
            s=70,edgecolor='black', linewidth=0.3, c='orange', label='Cluster 1')

plt.scatter(x=clusters[clusters['Cluster_Prediction'] == 0]['Annual_Income'],
            y=clusters[clusters['Cluster_Prediction'] == 0]['Spending_Score'],
            s=70,edgecolor='black', linewidth=0.3, c='deepskyblue', label='Cluster 2')

plt.scatter(x=clusters[clusters['Cluster_Prediction'] == 2]['Annual_Income'],
            y=clusters[clusters['Cluster_Prediction'] == 2]['Spending_Score'],
            s=70,edgecolor='black', linewidth=0.2, c='Magenta', label='Cluster 3')

plt.scatter(x=clusters[clusters['Cluster_Prediction'] == 1]['Annual_Income'],
            y=clusters[clusters['Cluster_Prediction'] == 1]['Spending_Score'],
            s=70,edgecolor='black', linewidth=0.3, c='red', label='Cluster 4')

plt.scatter(x=clusters[clusters['Cluster_Prediction'] == 3]['Annual_Income'],
            y=clusters[clusters['Cluster_Prediction'] == 3]['Spending_Score'],
            s=70,edgecolor='black', linewidth=0.3, c='lime', label='Cluster 5')



plt.scatter(x=kms.cluster_centers_[:, 0], y=kms.cluster_centers_[:, 1], s = 120, c = 'yellow', label = 'Centroids',edgecolor='black', linewidth=0.3)
plt.legend(loc='right')
plt.xlim(0,140)
plt.ylim(0,100)
plt.xlabel('Annual Income (in Thousand USD)')
plt.ylabel('Spending Score')
plt.title('Clusters', fontsize = 20)
plt.show()



"""Cluster5 - Balanced Customers :
They earn less and spend less.

Cluster2 - Pinch Penny Customers :
Earning high and spending less. 

Cluster4 - Normal Customer :
Customers are average in terms of earning and spending 

Cluster1 - Spenders :
This type of customers earns less but spends more

Cluster3 - Target Customers :
Earning high and also spending high Target Customers
"""

